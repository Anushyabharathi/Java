package Day8;
public class StaticVar {
	int sprno;               //instance var
	String name;             //instance var
	static String dept="CSE" ;  //static var
	public static void main(String[] args) {
//create obj to access the instance var
		StaticVar obj=new StaticVar();
		System.out.println(obj.sprno);   //print default value of datatype
        System.out.println(obj.name); //print default value
//no need to create a obj to access the static var
        System.out.println(StaticVar.dept);
//update the static var
        StaticVar.dept=" CSE B";
	}
}

package Day8;
public class Employee {
	int empid=9408;
	String empname="Anu";
	static String companyname="ZZZ";
    public void details(int a,String b)    //concrete method
    {
    	System.out.println(a+"-"+b+"-"+companyname);
    }
    public static void display(int x)     //static method
    {
    	Employee.companyname="Wipro";
    	System.out.println(x+" "+companyname);
    }
	public static void main(String[] args) {   //best eg of static method
		Employee obj=new Employee(); 
		System.out.println(obj.empid+" "+obj.empname+" "+Employee.companyname);
        Employee.companyname="XYZ";
 //instance methods calling
        obj.details(9407,"bharathi");
        obj.details(9378,"Divya");
        obj.details(9408,"Kajol");
 //static method calling
        Employee.display(9777);
        Employee.display(9778);
	}
}


package Day8;
public class StaticBlock {
	static       //executed before main method content
	{
		System.out.print("Hello "); 
	}
	public static void main(String[] args) {
		System.out.println("world");
	}
}


package Day8;
public class StaticEg {
	static                         //static block
	{
		System.out.println("         Bank Details");
		System.out.println("Accno"+"  "+"Name"+"      "+"Acctype"+"   "+"Branch");
		System.out.println("---------------------------------");
	}
	int accno=77700;
	String name="Anu";
	static String acctype="Savings";     //static var
	static String branch="xxx";          //static var
	public void display(int a,String b)  //instance method
	{
		System.out.println(a+"   "+b+"    "+acctype+"   "+branch);
	}
	public static void details(int a,String b )    //static method
	{
		StaticEg.acctype="Joint";
		System.out.println(a+"   "+b+"    "+acctype+"     "+branch);
	}
	public static void main(String[] args) {
		StaticEg obj=new StaticEg();
		System.out.println(obj.accno+"   "+obj.name+"      "+acctype+"   "+branch);
		StaticEg.branch="XYZ";
		obj.display(88800,"Shree");           //concrete method calling
		obj.display(99900,"Divya");
		StaticEg.details(11100,"Kajol");      //static method calling
		StaticEg.details(22200,"Irene");
	}
}


package Day8;
public class Trip {
	int day=1;
	String place="kodaikanal";
	String resort="APk";
	int price=4000;
	static
	{
		System.out.println("            TRIP DETAILS");
		System.out.println("Day"+"  "+"Destination"+"     "+"Stay"+"    "+"Amount");
		System.out.println("-----------------------------------");
	}
	public void tripdetails(int a,String b,String c,int d)
	{
		System.out.println(a+"  "+b+"       "+c+"    "+d);
	}
	public static void main(String[] args) {
		Trip t=new Trip();
		System.out.println(t.day+"  "+t.place+"       "+t.resort+"      "+t.price);
		Trip t1=new Trip();
		t1.tripdetails(2,"ooty","hesan",5000);
		Trip t2=new Trip();
		t2.tripdetails(3,"okanakal","ahan",3000);
		Trip t3=new Trip();
		t3.tripdetails(4,"yelagiri","Jhumna",6000);
		Trip t4=new Trip();
		t4.tripdetails(4,"thirvalley","Meganas",7000);
	}
}



DIFFERENT WAYS TO PRINT VALUES 
package Day8;
//1.access the instance var by using creating aobject then print the values by using obj name
public class WaysToPrintValues {
	int age=5;
	String name="Anu";
	public static void main(String[] args) {
		WaysToPrintValues obj=new WaysToPrintValues();
		System.out.println(obj.age);
		System.out.println(obj.name);
	}
}

//2.access the instance var by using method then creating a object then print the method values
public class WaysToPrintValues {
	void display(int a,String b)
	{
		System.out.println(a+" "+b); 
	}
public static void main(String[] args) {
	WaysToPrintValues obj=new WaysToPrintValues();  
	obj.display(19,"Anu");  //method calling
    }
}

//3.without creating a obj the constructor print the values present in the default constructor
public class WaysToPrintValues {
	WaysToPrintValues()     //default constructor 
	{
		System.out.println("Default construtor");
	}
	public static void main(String[] args) {
		WaysToPrintValues obj=new WaysToPrintValues();
	}
}

//4.without creating a obj the constructorprint the values present in the parameterized constructor
public class WaysToPrintValues {
	WaysToPrintValues(int a,String b)   //parameterized constructor
	{
		System.out.println(a+" "+b);    
		
	}
	public static void main(String[] args) {
		WaysToPrintValues obj=new WaysToPrintValues(19,"Anu");
	}
}

//5.assign the values to the instance var then print the values outside the constructor using method
public class WaysToPrintValues {
	int age;     //instance var
	String name;
	WaysToPrintValues(int a,String b)   //parameterized constructor
	{
		age=a;     //values assigned to instance var
		name=b;	
	}
	void display()
	{
		System.out.println(age+" "+name);    //access the values from the constructor bcz the instance var assigned
	}
	public static void main(String[] args) {
		WaysToPrintValues obj=new WaysToPrintValues(19,"Anu");  
		obj.display();  //method calling
	}
}

THIS KEYWORD
package Day8;
//1.differentiate the local and instance variables
public class ThisKeyword {
	int price;
	String product;
	ThisKeyword(int price,String product)
	{
		this.price=price;         
		this.product=product;
		System.out.println(product+" "+price);
	}
	public static void main(String[] args) {
		ThisKeyword t=new ThisKeyword(200,"Eyeliner");
	}
}
//2.invoke the current class method
public class ThisKeyword {
	void display()
	{
		System.out.println("Its tym to code");
	}
	void show()
	{
		System.out.println("hurry up");
		this.display();        //invoke the another method
	}
	public static void main(String[] args) {
		ThisKeyword t=new ThisKeyword();
		t.show();
	}
}


package Day8;
public class ConstructorOverloding {
 //ConstructorOverloding: same name but parameter different
	ConstructorOverloding(int a)
	{
		System.out.println(a);
	}
	ConstructorOverloding(float b)    
	{
		System.out.println(b);
	}
	public static void main(String[] args) {
		ConstructorOverloding obj1= new ConstructorOverloding(5);
		ConstructorOverloding obj2=new ConstructorOverloding(5.5f);
	}
}




package Day8;
//1.Single Level
class dad
{
	void dadproperty()
	{
		System.out.println("dad");
	}
}
class son extends dad    //extend keyword to access the parent property
{
	void sonproperty()
	{
		System.out.println("Son");
	}
}
public class InheritanceConcepts {
	public static void main(String[] args) {
		son s=new son();
		s.dadproperty(); //access the parent behaviour
		s.sonproperty();
	}
}


//2.MULTILEVEL 
class grandpa
{
	void grandpaproperty()
	{
		System.out.println("Grand Father");
	}
}class dad extends grandpa   //extend keyword to access the parent property
{
	void dadproperty()
	{
		System.out.println("Dad");
	}
}
class son extends dad    //extend keyword to access the parent property
{
	void sonproperty()
	{
		System.out.println("Son");
	}
}
public class InheritanceConcepts {
	public static void main(String[] args) {
		son s=new son();
		s.grandpaproperty(); //access the parent behaviour
		s.dadproperty(); //access the parent behaviour
		s.sonproperty();
	}
}


//3.HIERACHICAL
class dad
{
	void dadproperty()
	{
		System.out.println("dad");
	}
}
class daughter extends dad
{
	void daughterproperty()
	{
		System.out.println("Daughter");
	}
}
class son extends dad    //extend keyword to access the parent property
{
	void sonproperty()
	{
		System.out.println("Son");
	}
}
public class InheritanceConcepts {
	public static void main(String[] args) {
		son s=new son();
		s.dadproperty();     //access the parent(dad) behaviour
		s.sonproperty();
		daughter d=new daughter();
		d.dadproperty();    //access the parent(dad) behaviour
		d.daughterproperty();     
	}
}





