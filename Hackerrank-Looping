YM1039
//Write a program to find out who wins the competition, Alaric or Seraphina. You'll need to use their special numbers and the total number of puzzles in the library to figure it out.
//use the GCD of the competitor's special number and the total puzzles to decide who can solve more puzzles.
import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int x=sc.nextInt();
        int y=sc.nextInt();
        int n=sc.nextInt();
        int t=n;
        int a=(x<n)?x:n;
        int s=(y<n)?y:n;
        int gcd=0;
        int ares=0,sres=0;
            for(int i=1;i<=a;i++)
            {
                for(int j=1;j<=s;j++)
                {
                    if(x%i==0 && n%i==0)
                     {
                        gcd=i;
                        ares+=gcd;
                        
                    }
                    if(y%j==0 && n%j==0)
                    {
                        gcd=j;
                        sres+=gcd;
                    }
                }
            }
            if(ares>sres)
            {
                System.out.println("Alaric unravels the most Mystical Scrolls in the Grand Library!");
            }
            else if(ares==sres)
            {
                System.out.println("Alaric unravels the most Mystical Scrolls in the Grand Library!");
            }
            else
            {
                System.out.println("Seraphina unravels the most Mystical Scrolls in the Grand Library!");
            }
    }
}


YM1040
//Write a program to help Lily determine the number of Dreamlings that suffered moral or physical damage in her fantastical dream world, given that she counted a total of d Dreamlings.
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int k=sc.nextInt();
        int l=sc.nextInt();
        int m=sc.nextInt();
        int n=sc.nextInt();
        int d=sc.nextInt();
        int count=0;
        for(int i=1;i<=d;i++)
        {
            if(i%k==0 || i%l==0 || i%m==0 || i%n==0 )
            {
                count++;
            }
        }
        System.out.println(count);
    }
}

YM1042
//program that counts the number of carry operations required for each addition problem, allowing these budding wizards to assess their magical prowess.
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int num1=sc.nextInt();
        int num2=sc.nextInt();
        int count=0,carry=0;
        int temp1=0,temp2=0;
        while(num1>0 || num2>0)
        {
            if(num1>=0)
            {
                int n1=num1%10;
                temp1=n1;
                num1/=10;
            }
            if(num2>=0)
            {
                int n2=num2%10;
                temp2=n2;
                num2/=10;
            }
            int sum=temp1+temp2+carry;
            if(sum>9)
            {
                carry=1;
                count++;
            }
            else
            {
                carry=0;
            }
        }
        System.out.println(count);
    }
}


YM1044
//print all prime numbers between two given integers
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int num1=sc.nextInt();
        int num2=sc.nextInt();
        if(num1<=num2){
        for(int i=num1;i<num2;i++)
        {
            if(i<2)
            {
                continue;
            }
            int num=0;
            for(int j=2;j*j<=i;j++)
            {
                if(i%j==0)
                {
                    num++; 
                    break;
                }
            }
            if(num==0)
            {
                System.out.print(i+" ");
            }
        } 
        }
    }
}

YM1045
//calculate the sum of all even numbers between 1 and N
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int sum=0;
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
            {
                sum+=i;
            }
        }
        System.out.println(sum);
    }
}


YM1046
//write a code to print Fibonacci sequence 
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int a=0,b=1;
        System.out.print(a+" "+b);
        for(int i=3;i<=n;i++)
        {
            int temp=a+b;
            System.out.print(" "+temp);
            a=b;
            b=temp;
        }
    }
}

YM1047
//A single integer representing the number of trailing zeroes in N factorial
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int sum=0;
        for(int i=5;i<=n;i*=5)
        {
            sum+=n/i;
        }
        System.out.println(sum);
    }
}


YM1048
//A single integer representing the sum of the digits of N factorial.
import java.io.*;
import java.util.*;
public class Solution {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        long fact=1;
        for(int i=2;i<=n;i++)
        {
            fact=fact*i;
        }
        int sum=0;
        while(fact!=0)
        {
            long factorial=fact%10;
            sum+=factorial;
            fact/=10;
        }
        System.out.println(sum);
    }
}
